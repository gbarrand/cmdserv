
  To build :
          UNIX> cd ./inexlib/exlib/examples/cpp
 [macOS,Linux]> ./build -v cmdserv.cpp      # -v to see what is compiled. -x to have a full verbosity.
          UNIX> ./build term2serv.cpp

 (here UNIX is for Linux, macOS, Windows-10/cygwin, but cmdserv had not been ported on Windows-10/cygwin)

  If the GNU parallel application is known from your prompt, you can use the "-parallel"
 option so that C and C++ file compilations are distributed on your cores. This feature
 had been tested with success on macOS with a MacPorts installation of the GNU parallel program
 and on centos7 by using the GNU distribution. It clearly boosts the build of the ourex externals.

 To run :
   ./bin_[gnu,clang]/cmdserv -verbose
 example :
   ./bin_[gnu,clang]/cmdserv -host=0.0.0.0 -port=8080

 from another terminal :
   ./bin_[gnu,clang]/term2serv -host=<ip of the cmdserv machine> -port=<port id>
   2cmdserv> help
   2cmdserv> ls
   2cmdserv> exit
 example :
   ./bin_[gnu,clang]/term2serv -host=0.0.0.0 -port=8080

 From a web browser with cmdserv running on the <ip> machine looking at the <port> port number :
   http://<ip>:<port>/?cmd=help
 example :
   http://0.0.0.0:8080/?cmd=help
 other commands : 
   http://<ip>:<port>/?cmd=ls      //list files of the home directory on the <ip> machine.
   http://<ip>:<port>/?cmd=lsd     //list directories of the home directory on the <ip> machine.
   http://<ip>:<port>/?cmd=lsf     //list only regular files of the home directory on the <ip> machine.
   http://<ip>:<port>/?cmd=size+<file name>
   http://<ip>:<port>/hello.html
   http://<ip>:<port>/form.html
    For the form, an uploaded file is put under /tmp/exlib_cmdserv_<filename>

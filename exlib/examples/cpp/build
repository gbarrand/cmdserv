#!/bin/sh -f

#set -x

build_clean=no
build_use_shlib=no

what=""
args=""
while test $# -ge 1 ; do
  case $1 in
    -clean)  build_clean=yes;;

    -x11)    echo "-x11 not accepted";exit;;
    -X11)    echo "-X11 not accepted";exit;;
    -cocoa)  echo "-cocoa not accepted";exit;;
    -ios)    echo "-ios not accepted";exit;;
    -iossim) echo "-iossim not accepted";exit;;
    -use_shlib)  build_use_shlib=yes;;

    -*) args="${args} $1";;
     *) if [ $# = 1 ] ; then
          what=$1
        else         
        echo "exlib/examples/cpp/build : unknown option : $1"
        fi
        ;;
  esac
  shift
done

if [ ${build_clean} = "yes" ] ; then
  echo "exlib/examples/cpp/build : do it by hand."
  exit
fi

if [ "${what}" = "" ] ; then
  find . -maxdepth 1 -name '*.cpp' -exec ./build ${args} {} \;
  exit
fi

base_name=`basename ${what}`

if [ "`echo ${base_name} | grep '\.f'`" != "" ] ; then exit; fi
if [ ${base_name} = "chbook.cpp" ] ; then exit ;fi
if [ ${base_name} = "whbook.cpp" ] ; then exit ;fi

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
suffix=
if [ `echo ${base_name} | sed -e 's:\.cpp::g'` != ${base_name} ] ; then
  suffix=cpp
elif [ `echo ${base_name} | sed -e 's:\.c::g'` != ${base_name} ] ; then
  suffix=c
elif [ `echo ${base_name} | sed -e 's:\.ecpp::g'` != ${base_name} ] ; then
  suffix=ecpp
fi

if [ "${suffix}" = "" ] ; then echo 'exlib/examples/cpp/build : suffix not treated';fi

name="${base_name}"
name=`echo ${name} | sed -e 's:\.cpp::g'`
name=`echo ${name} | sed -e 's:\.c::g'`
name=`echo ${name} | sed -e 's:\.ecpp::g'`
#name=`echo ${name} | sed -e 's:./::g'`

if [ ${name} = "moc_Qt" ] ; then exit ;fi

exlib_mgr=../../../exlib/mgr

args="${args} -no_screen"

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
build_args="${args}"
. ${exlib_mgr}/build_app_header

build_distrib=no

if [ ${build_verbose} = yes ] ; then echo "build ${name} ...";fi

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
if [ ${build_visual} = "yes" ] ; then
  # rm painfull warnings about API strcpy, etc... deprecated.
  cppflags="${cppflags} /wd4996"
  ccflags0="${ccflags0} /wd4996"
fi

#//////////////////////////////////////////////////////////
#/// look for an //exlib_build_use in the app main cpp ////
#//////////////////////////////////////////////////////////
app_use_main="${base_name}"
. ${exlib_mgr}/app_use

#//////////////////////////////////////////////////////////
#/// incompatibilities use/compiler : /////////////////////
#//////////////////////////////////////////////////////////

if [ ${build_visual} = "yes" ] ; then
  if [ "${use_X11}" = "yes" ] ; then exit;fi
  if [ "${use_gtk}" = "yes" ] ; then exit;fi
  if [ "${use_Qt}" = "yes" ] ; then exit;fi
  if [ "${use_Xm}" = "yes" ] ; then exit;fi
  if [ "${use_Wt}" = "yes" ] ; then exit;fi
else
  if [ "${use_win32}" = "yes" ] ; then exit;fi
fi

if [ "${use_xerces}" = "yes" ] ; then
  echo "exlib/examples/cpp/build : ourex xercesc not yet ready."
  exit
fi

if [ "${use_Wt}" = "yes" ] ; then G4_cppflags=""; fi
if [ "${use_SOPHYA}" = "yes" ] ; then G4_cppflags=""; fi
if [ "${use_graphviz}" = "yes" ] ; then G4_cppflags=""; fi
if [ "${use_Python}" = "yes" ] ; then G4_cppflags=""; fi
if [ "${use_tntnet}" = "yes" ] ; then G4_cppflags=""; fi
if [ "${use_CoinGL}" = "yes" ] ; then
  # With -pedantic and coin3d/3.1.3 we have the error :
  #   HEPVis/source/SoSFPolyhedron.cxx:7: error: extra ~;~
  G4_cppflags=""
fi

if [ "${use_cexpr}" = "yes" ] ; then
  files="${files} ${exlib_mgr}/../exlib/yacc/cexpr_lexer.cpp"
  files="${files} ${exlib_mgr}/../exlib/yacc/cexpr_eval.cpp"
fi

#/////////////////////////////////////////////////////////
#/// not automatic flags /////////////////////////////////
#/////////////////////////////////////////////////////////
if [ ${build_x11_no_gl} = "yes" ] ; then
  use_GLX=no
  use_GL=no
fi

if [ ${name} = "sg_povama_X11" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    echo "exlib/examples/cpp/build : WARNING : today -DEXLIB_HAS_VBO not supported."
  else
    cppflags="${cppflags} -DEXLIB_HAS_VBO"
  fi
fi

if [ ${name} = "sg_tex_sphere_anim_X11" ] ; then
  cppflags="${cppflags} -DEXLIB_HAS_JPEG"
  cppflags="${cppflags} -DEXLIB_HAS_PNG"
fi

if [ ${name} = "GL_Qt" ] ; then
  cppfiles="${cppfiles} moc_Qt.cpp"
  if [ ! -e /usr/bin/moc  ] ; then
    echo "exlib/examples/cpp/build : /usr/bin/moc not found."
    exit
  fi
  /usr/bin/moc -o moc_Qt.cpp Qt.h
fi

if [ ${name} = "raxml_2_cern_root" ] ; then
  if [ "${ROOTSYS}" = "" ] ; then
    echo "exlib/examples/cpp/build : to build ${name} you have to 'source setup' ROOT."
    exit
  fi

  #////////////////////////////////////////////////
  #// look if root-config is around : /////////////
  #////////////////////////////////////////////////
  ${exlib_mgr}/check_app root-config 'root-config program not found. You have to <source setup> CERN-ROOT.'
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

  cern_root_cxx="`root-config --cxx`"

  if [ `uname` = "Darwin" ] ; then
    # NOTE : CERN-ROOT does not compile with clang++ 3.0.
    if [ "${cpp_compiler}" != "g++" ] ; then
      if [ "${cern_root_cxx}" = "g++" ] ; then
        echo "exlib/examples/cpp/build : CERN-ROOT built with g++. Required compiler is ${cpp_compiler}."
        exit
      fi
    fi
  fi

  #////////////////////////////////////////////////
  #// Generating the CINT wrapping : //////////////
  #////////////////////////////////////////////////

  eval `root-config --bindir`/rootcint -f G__exlib.cpp -c -I../../../inlib -I../../../exlib ../../exlib/cern_root/exlib_def.h ../../exlib/cern_root/exlib_LinkDef.h 
  cppfiles="${cppfiles} ./G__exlib.cpp"
fi

cppflags="${G4_cppflags} ${cppflags}"

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

if [ "${use_screen}" = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    use_win32=yes
  else
    use_X11=yes
    use_GLX=yes
  fi
fi

if [ "${use_png}" = "yes" ] ; then use_zlib=yes; fi  
if [ "${use_hdf5}" = "yes" ] ; then use_zlib=yes; fi

. ${inlib_mgr}/use_inlib
. ${exlib_mgr}/use_exlib

#/////////////////////////////////
#/// gui and windowing : /////////
#/////////////////////////////////
# enforce the use of archive libs :
use_archive=yes
if [ ${build_use_shlib} = yes ] ; then use_archive=no;fi

. ${exlib_mgr}/use_gtkglarea
. ${exlib_mgr}/use_gtk

. ${exlib_mgr}/use_Qt
. ${exlib_mgr}/use_Wt
. ${exlib_mgr}/use_Xm
. ${exlib_mgr}/use_XmOpenGLArea

. ${exlib_mgr}/use_X11
. ${exlib_mgr}/use_win32
. ${exlib_mgr}/use_Cocoa

#/////////////////////////////////
#/// graphics : //////////////////
#/////////////////////////////////
. ${exlib_mgr}/use_HEPVis  # needs png jpeg freetype
. ${exlib_mgr}/use_CoinGL  # must be after use_X11 (because of GLX)

. ${exlib_mgr}/use_gl2ps

. ${exlib_mgr}/use_GL

#/////////////////////////////////
#/// over C/C++ only /////////////
#/////////////////////////////////
. ${exlib_mgr}/use_csz
. ${exlib_mgr}/use_freetype
. ${exlib_mgr}/use_jpeg
. ${exlib_mgr}/use_expat
. ${exlib_mgr}/use_SOPHYA
. ${exlib_mgr}/use_cfitsio
. ${exlib_mgr}/use_hdf5
. ${exlib_mgr}/use_tntnet

. ${exlib_mgr}/use_zip
. ${exlib_mgr}/use_png
. ${exlib_mgr}/use_zlib
. ${exlib_mgr}/use_sqlite
. ${exlib_mgr}/use_glutess
. ${exlib_mgr}/use_boost
. ${exlib_mgr}/use_graphviz
. ${exlib_mgr}/use_dcmtk
. ${exlib_mgr}/use_gsl
. ${exlib_mgr}/use_gmp

. ${exlib_mgr}/use_AIDA
. ${exlib_mgr}/use_aida_config
. ${exlib_mgr}/use_cern_root # :-(
. ${exlib_mgr}/use_geant4
. ${exlib_mgr}/use_pythia8
. ${exlib_mgr}/use_Getline
. ${exlib_mgr}/use_Python
. ${exlib_mgr}/use_bpy
. ${exlib_mgr}/use_lua
. ${exlib_mgr}/use_blua

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
#. ${inlib_mgr}/use_socket
. ${inlib_mgr}/use_thread
. ${inlib_mgr}/use_dl
. ${inlib_mgr}/use_util

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

app_src=${base_name}
app_exe=${name}
app_name=${name}

. ${inlib_mgr}/build_app

/bin/rm -f moc_Qt.cpp
/bin/rm -f G__exlib.cpp
/bin/rm -f G__exlib.h
